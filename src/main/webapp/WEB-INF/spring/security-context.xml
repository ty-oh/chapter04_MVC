<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


<!-- access-denied-handler를 커스텀 하는 경우 바로 에러 페이지를 명시하는게 아니고 빈으로 컨테이너에 생성해서 참조를 시켜준다.  -->
<bean id="customAccessDenied" class="org.joonzis.security.CustomAccessDeniedHandler"></bean>
<bean id="customLoginSuccess" class="org.joonzis.security.CustomLoginSuccessHandler"></bean>
<bean id="bcryptPasswordEncoder" 
	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
<bean id="customUserDetailService" class="org.joonzis.security.CustomUserDetailService"></bean>


<!-- 특정 url에 접근할떄 아래의 intercept-url을 체크한다. -->
<!-- 
	auto-config="true"
	
 -->
<security:http auto-config="true" use-expressions="true">
	<security:intercept-url pattern="/sample/all" access="permitAll"/>
	<security:intercept-url pattern="/customLogout" access="permitAll"/>
	<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
	
	<!-- 	<security:form-login/> -->
	<security:form-login login-page="/customLogin"
		authentication-success-handler-ref="customLoginSuccess"/>
	<!-- invalidate-session="true" 로그아웃시 세션을 지워주는 옵션이다.-->
	<security:logout logout-url="/customLogout" invalidate-session="true"/>
	
	<!-- access 권한 없을때 에러가 발생하면 해당 페이지로 보냄-->
	<security:access-denied-handler ref="customAccessDenied"/>
	
	<security:csrf disabled="true"/>
</security:http>

<!-- 인증 관리 -->
<security:authentication-manager>
	<security:authentication-provider user-service-ref="customUserDetailService">
		<!--1. 유저 서비스 강제 추가 -->
<!-- 		<security:user-service> -->
<!-- 			<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/> -->
<!-- 			<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/> -->
<!-- 		</security:user-service> -->
		<!--2. 유저서비스 db 연동(임시로가져옴) -->
<!-- 		<security:jdbc-user-service data-source-ref="dataSource" -->
<!-- 			users-by-username-query="select userid, userpw, enabled from tbl_member where userid=?" -->
<!-- 			authorities-by-username-query="select userid, auth from tbl_member_auth where userid=?"/> -->
		<!--3. Bean을 참조하기 user-service-ref로 추가해준다.  -->
		<security:password-encoder ref="bcryptPasswordEncoder"/>

	</security:authentication-provider>
</security:authentication-manager>

</beans>
